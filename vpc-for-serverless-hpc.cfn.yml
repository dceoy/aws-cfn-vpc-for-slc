---
AWSTemplateFormatVersion: 2010-09-09
Description: VPC with public and private subnets in 3 AZs, a NAT gateway in 1 AZ, and a VPC endpoint for S3
Parameters:
  ProjectName:
    Description: Set the project name.
    Type: String
    Default: slhpc
  AZ0:
    Description: Set the first AZ suffix.
    Type: String
    Default: a
  AZ1:
    Description: Set the second AZ suffix.
    Type: String
    Default: c
  AZ2:
    Description: Set the third AZ suffix.
    Type: String
    Default: d
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public0:
      CIDR: 10.0.0.0/24
    Public1:
      CIDR: 10.0.16.0/24
    Public2:
      CIDR: 10.0.32.0/24
    Private0:
      CIDR: 10.0.128.0/24
    Private1:
      CIDR: 10.0.144.0/24
    Private2:
      CIDR: 10.0.160.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - VPC
          - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ProjectName}-vpc
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}${AZ0}
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public0
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ProjectName}-subnet-public0-${AWS::Region}${AZ0}
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}${AZ1}
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public1
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ProjectName}-subnet-public1-${AWS::Region}${AZ1}
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}${AZ2}
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public2
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ProjectName}-subnet-public2-${AWS::Region}${AZ2}
  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}${AZ0}
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Private0
          - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${ProjectName}-subnet-private0-${AWS::Region}${AZ0}
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}${AZ1}
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Private1
          - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${ProjectName}-subnet-private1-${AWS::Region}${AZ1}
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}${AZ2}
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Private2
          - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${ProjectName}-subnet-private2-${AWS::Region}${AZ2}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ProjectName}-igw
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ProjectName}-rtb-public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${ProjectName}-nacl-public
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  PublicSubnetNetworkAclAssociation0:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl
  ElasticIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway0:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIP0
          - AllocationId
      SubnetId: !Ref PublicSubnet0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-nat-public0-${AWS::Region}${AZ0}
  PrivateRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rtb-private0-${AWS::Region}${AZ0}
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rtb-private1-${AWS::Region}${AZ1}
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-rtb-private2-${AWS::Region}${AZ2}
  PrivateRouteToInternet0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway0
  PrivateRouteToInternet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway0
  PrivateRouteToInternet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway0
  PrivateSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref PrivateRouteTable0
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-vpce-s3
Outputs:
  VPCId:
    Description: VPCId of VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-VPC
  PublicSubnet0:
    Description: SubnetId of public subnet 0
    Value: !Ref PublicSubnet0
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicSubnet0
  PublicSubnet1:
    Description: SubnetId of public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicSubnet1
  PublicSubnet2:
    Description: SubnetId of public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicSubnet2
  PrivateSubnet0:
    Description: SubnetId of private subnet 0
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateSubnet0
  PrivateSubnet1:
    Description: SubnetId of private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2:
    Description: SubnetId of private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateSubnet2
  DefaultSecurityGroup:
    Description: DefaultSecurityGroup Id
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup
